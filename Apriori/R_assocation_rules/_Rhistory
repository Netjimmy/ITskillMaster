for(i in 1:10){
print(i);
}
sum(1:100)
ary = rep(NA, 100)
for(i in 1:100){
ary[i]= i;
}
ary
ary2 =c()
for(i in 1:100){
ary2 = c(ary2, i);
}
ary2
mat = matrix(1:9, byrow=TRUE, nrow=3)
for(i in seq_len(nrow(mat))) {
for(j in seq_len(ncol(mat))) {
cat(mat[i, j], " ")
}
cat('\n');
}
sum = 0;
cnt = 0;
while(cnt <= 100){
sum = sum + cnt;
cnt = cnt + 1;
}
sum
mat = matrix(1:9, byrow=TRUE, nrow=9)
for(i in seq_len(nrow(mat))) {
for(j in seq_len(ncol(mat))) {
cat(mat[i, j], " ")
}
cat('\n');
}
mat = matrix(1:9, byrow=TRUE, nrow=1)
for(i in seq_len(nrow(mat))) {
for(j in seq_len(ncol(mat))) {
cat(mat[i, j], " ")
}
cat('\n');
}
mat = matrix(1*1:9*9, byrow=TRUE, nrow=1)
mat = matrix(1*1:9*9, byrow=TRUE, nrow=9)
View(mat)
View(mat)
match = read.txt("match.txt",header=TRUE)
match = read("match.txt",header=TRUE)
match_function = function(filename='match.txt'){
mat = matrix(-1, nrow=5, ncol=5)
}
match_function
mat
match_function(mat)
mat = matrix(-1, nrow=5, ncol = 5)
mat
rownames(mat) = c("A","B","C","D","E")
colnames(mat) = c("A","B","C","D","E")
mat = matrix(-1, nrow=5, ncol = 5)
mat
rownames(mat) = c("A","B","C","D","E")
colnames(mat) = c("A","B","C","D","E")
mat
match_func = function(filename= "match.txt"){
mat = matrix(-1, nrow=5, ncol = 5)
rownames(mat) = c("A","B","C","D","E")
colnames(mat) = c("A","B","C","D","E")
match = read.table(filename, sep= "|")
for (i in 1:nrow(match)){
mat[match[i,1], match[i,2]] = match[i,3];
}
mat
}
match_func('match.txt')
match_func()
match_func = function(filename= "E:/C1500390/R/match.txt"){
mat = matrix(-1, nrow=5, ncol = 5)
rownames(mat) = c("A","B","C","D","E")
colnames(mat) = c("A","B","C","D","E")
match = read.table(filename, sep= "|")
for (i in 1:nrow(match)){
mat[match[i,1], match[i,2]] = match[i,3];
}
mat
}
match_func('match.txt')
match_func()
match_func('E:/C1500390/R/match.txt')
grades =list(kevin = c(80,60,92), marry = c(56,75,64,84,56), QOO = c(10,20,3,4,10))
grades =list(kevin = c(80,60,92), marry = c(56,75,64,84,56), QOO = c(10,20,3,4,10))
unlist(grades[1])
for (i in 1:length(grades)){
print(sum(unlist(grades[i])));
}
lapply(grades, sum)
lapply(grades, mean)
lapply(grades, function(e){list(sum = sum(e), min = min(e))})
lapply(c(1,2,3,4,5),  function(e){paste(as.character(e), "hello")})
m1 = matrix(1:4, byrow=TRUE, nrow=2)
m2 = matrix(5:8, byrow=TRUE, nrow=2)
li = list(m1, m2)
lapply(li, mean)
load("E:/C1500390/R/cdc.Rdata")
hist(cdc$weight)
salary = c(22,23,25,27,32,35,22,23,25,27,32,35,50,55,60,220,230,250,300,220,230,250,300)
hist(salary)
hist(cdc$weight, breaks=50)
hist(cdc$weight, breaks=500)
?breaks
??breaks
?hist
names(which.max(table(c(1,4,4,3))))
names(which.max(cdc$weight))
names(which.max(table(cdc$weight))
)
hist(cdc$weight)
table(cdc$smoke100)
table(~cdc$smoke100)
hist(~cdc$smoke100)
barplot(table(cdc$smoke100))
g_smokers = table(cdc$gender,cdc$smoke100)
g_smokers
a = c(150, 155, 160, 162, 168, 171, 173, 175, 178, 182, 185)
IQR(a)
low_adjacent = max(median(a) - 1.5 * IQR(a), 150)
high_adjacent = min(median(a) + 1.5 * IQR(a), 180)
low_adjacent
boxplot(cdc$weight)
par(mfrow=c(2,1))
hist(cdc$weight)
boxplot(cdc$weight, horizontal=TRUE)
par(mfrow=c(2,2))
boxplot(cdc$weight ~ cdc$gender)
boxplot(cdc$height ~ cdc$gender)
temp = c(20,30,22,21,35,23,24,27,28)
temp = rnorm(10000, mean = 25, sd = 5)
bmi = (cdc$weight/cdc$height^2) * 703
boxplot(bmi ~ cdc$genhlth)
bmi = (cdc$weight/cdc$height^2) * 703
boxplot(bmi ~ cdc$genhlth)
plot(cdc$weight, cdc$wtdesire)
plot(cdc$weight, cdc$wtdesire)
plot(cdc$weight, cdc$wtdesire)
plot(cdc$weight, cdc$wtdesire)
plot(cdc$weight, cdc$wtdesire)
temp = c(20,30,22,21,35,23,24,27,28)
temp = rnorm(10000, mean = 25, sd = 5)
temp
hist(stem)
hist(temp)
boxplot(temp2)
temp2 = c(temp, 9999,9999,9999,9999,9999,9999,-1,-1,-1,-1)
boxplot(temp2)
?car
help.search(?um??)
help.search(?um??)
rm(a)
getwd()
gdp = read.csv("C:/Users/BigData/Desktop/gdp.csv",header=TRUE)
dnorm(0)
curve(dnorm,-3,3)
?dnorm
dnorm(0) == 1/sqrt(2*pi)
hist(rnorm(1000,mean=70, sd=30))
sample(1:10)
sample(1:10)
sample(1:10, size = 5)
sample(1:42, size = 6)
sample(c(0,1), 2)
sample(c(0,1), 10, replace = TRUE)
sample.int(20, 12)
sample.int(20, 12)
coins = c("heads", "tails")
fair_coin = sample(coins, size = 100, replace = TRUE)
table(fair_coin)
dice = sample(1:6, size=1000,replace=TRUE)
table(dice)
barplot(table(dice))
outcomes = c("head", "tail")
unfair_coin = sample(outcomes, size = 100, replace = TRUE, prob = c(0.3,0.7))
table(unfair_coin)
rnorm(100)
hist(rnorm(100))
set.seed(123)
sample(1:10, 3)
sample(1:10, 3)
sample(1:10, 3)
sample(1:10, 3)
set.seed(123)
sample(1:10, 3)
sample(1:10, 3)
set.seed(123)
set.seed(123)
sample(1:10, 3)
set.seed(123)
sample(1:42, 6)
sample(1:42, 6)
sample(1:42, 6)
sample(1:42, 6)
set.seed(123)
sample(1:42, 6)
head(.Random.seed)
head(.Random.seed)
head(.Random.seed)
set.seed(50)
head(.Random.seed)
head(.Random.seed)
head(.Random.seed)
names(ames)
load(ames.Rdata)
load(ames.Rdata)
load(kobe.Rdata)
load(kobe.RData)
load("E:/C1500390/R/kobe.RData")
load("E:/C1500390/R/kobe.RData")
View(kobe)
load("E:/C1500390/R/ames.RData")
View(ames)
area = ames$Gr.Liv.Area
hist(area)
sample_means10 = rep(NA, 5000)
sample_means50 = rep(NA, 5000)
sample_means100 = rep(NA, 5000)
for (i in 1:5000){
sample_means10[i] = mean(sample(area, 10))
}
hist(sample_means10)
for (i in 1:5000){
sample_means50[i] = mean(sample(area, 50))
}
hist(sample_means50)
for (i in 1:5000){
sample_means100[i] = mean(sample(area, 100))
}
for (i in 1:5000){
sample_means100[i] = mean(sample(area, 100))
}
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
par(hfrow = c(3, 1))
par(mfrow = c(1, 3))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
curve(dnorm, -3,3)
pnorm(1) - pnorm(-1)
par(mfrow = c(0, 1))
par(mfrow = c(1))
par(mfrow = c(1))
?seq
population = ames$Gr.Liv.Area
mean(population)
samp = sample(population, 50)
sample_mean = mean(samp)
hist(samp)
sde = sd(samp)/sqrt(50)
lower = sample_mean - 1.96 * sde
upper = sample_mean + 1.96 * sde
dens <- density(population)
plot(dens, col="red")
mean(population)
abline(v = mean(population), col="blue")
lower
upper
polygon(c(lower, dens$x[dens$x>lower & dens$x < upper], upper), c(0, dens$y[dens$x>=lower & dens$x <= upper], 0), col="red", density = c(10, 50) ,angle = c(-45, 45))
curve(dnorm, -3,3)
x = c(-1.96,seq(-1.96,1.96,0.1),1.96)
y = c(0,dnorm(seq(-1.96,1.96,0.1)),0)
polygon(x,y, col = "red")
alpha = 0.05
1 - alpha / 2
qnorm(1 - alpha / 2)
qnorm( 1 - (1 - alpha / 2))
alpha = 0.01
1 - alpha / 2
qnorm(1 - alpha / 2)
qnorm( 1 - (1 - alpha / 2))
lower = sample_mean - 2.58 * sde
upper = sample_mean + 2.58 * sde
polygon(c(lower, dens$x[dens$x>lower & dens$x < upper], upper), c(0, dens$y[dens$x>=lower & dens$x <= upper], 0), col="green", density = c(10, 50) ,angle = c(-45, 45))
x = c(160,170,180)
y = c(64, 68, 72)
cov_xy = sum((x - mean(x)) * (y - mean(y))) / 2
cov(x,y)
cor_xy = (sum((x - mean(x)) * (y - mean(y))) / 2) / (sd(x) * sd(y))
cor(x,y)
plot(x,y)
data(mtcars)
mtcars
cov(mtcars)
cor(mtcars)
cov(mtcars[1:3])
gdp = read.csv("gdp.csv",header=TRUE)
gdp = read.csv("E:/C1500390/R/gdp.csv",header=TRUE)
gdp = gdp[1:15,]
gdp$GDP = as.numeric(sub(",", "", gdp$GDP))
gdp$Export = as.numeric(sub(",", "", gdp$Export))
cor(gdp$Export, gdp$GDP
)
data(iris)
class(iris)
str(iris)
install.packages("rpart")
library(rpart)
detach("package:rpart", unload=TRUE)
library(rpart)
fit = rpart(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data = iris)
plot(fit)
text(fit)
plot(fit, margin=0.1)
text(fit)
plot(iris$Petal.Length, iris$Petal.Width )
plot(iris$Petal.Length, iris$Petal.Width, col="red" )
plot(iris$Petal.Length, iris$Petal.Width, col=iris$Species )
plot(iris$Petal.Length, iris$Petal.Width )
plot(iris$Petal.Length, iris$Petal.Width, col="red" )
plot(iris$Petal.Length, iris$Petal.Width, col=iris$Species )
abline(v = 2.45, col="blue",lwd = 3)
abline(h = 1.75, col="orange",lwd = 3)
?abline
predict(fit, iris)
?predict
prediction = predict(fit, iris, type="class")
realcase = c('1', '2', '1', '2', '3')
forecast = c('1', '2', '3', '2', '2')
table(realcase, forecast)
table(iris$Species, prediction)
install.packages("C50")
library(C50)
data(churn)
str(churnTrain)
df = data.frame(a = c(1,2), b = c(3,4))
df
df[,"a"]
df[,-1]
df[,names(df) %in% 'a']
churnTrain = churnTrain[,! names(churnTrain) %in% c("state", "area_code", "account_length") ]
nrow(churnTrain)
samp = sample(2, nrow(churnTrain), replace= TRUE ,prob=c(.7,.3))
table(samp)
idx = sample(2, nrow(churnTrain), replace= TRUE ,prob=c(.7,.3))
idx
a = c(1,2,3,4)
b = c(1,2,1,2)
a[b == 1]
ind <- sample(2, nrow(churnTrain), replace = TRUE, prob=c(0.7, 0.3))
trainset = churnTrain[ind == 1,]
testset = churnTrain[ind == 2,]
names(trainset)
churn.rp <- rpart(churn ~ ., data=trainset)
plot(churn.rp, margin= 0.1)
text(churn.rp, all=TRUE, use.n = TRUE)
ctree.model <- ctree(churn ~ . , data = trainset)
ctree.model <- ctree(churn ~ . , data = trainset)
plot(ctree.model)
package.install(ctree)
library(C50)
library(ctree)
churn.rp <- rpart(churn ~ ., data=trainset)
plot(churn.rp, margin= 0.1)
ctree.model <- ctree(churn ~ . , data = trainset)
ctree.model <- ctree(churn ~ . , data = trainset)
plot(ctree.model)
iris.model <- ctree(Species ~ . , data = iris)
plot(iris.model)
min(churn.rp$cptable[,"xerror"])
which.min(churn.rp$cptable[,"xerror"])
churn.rp$cptable
churn.cp = churn.rp$cptable[8,"CP"]
prune.tree = prune(churn.rp, cp= churn.cp)
plot(prune.tree, margin= 0.1)
text(prune.tree, all=TRUE , use.n=TRUE)
predictions <- predict(churn.rp, testset, type="class")
predictions = predict(churn.rp, testset, type="class")
predictions = predict(churn.rp, testset, type="class")
predictions = predict(churn.rp, testset, type="class")
table(testset$churn, predictions)
tb= table(testset$churn, predictions)
plot(ctree.model)
install.packages("caret")
install.packages("caret")
library(caret)
confusionMatrix(tb)
install.packages("e1071")
install.packages("shiny")
source('E:/Project/Analysis/R_assocation_rules/Project apriori.R')
source('E:/Project/Analysis/R_assocation_rules/Project apriori.R')
install.packages("arules")
install.packages("arules")
install.packages("arules")
rules <- apriori(data, parameter = list(supp = 0.01, conf = 0.8, minlen = 2, target='rules'))
rules
inspect(rules[1:50])
itemset <- apriori(data, parameter = list(supp = 0.01, conf = 0.8, minlen = 2, target='frequent itemsets'))
itemset
inspect(itemset[1:50])
itemset <- apriori(data, parameter = list(supp = 0.01, conf = 0.8, minlen = 3, target='frequent itemsets'))
itemset
inspect(itemset[1:50])
itemset <- apriori(data, parameter = list(supp = 0.05, conf = 0.8, minlen = 3, target='frequent itemsets'))
itemset
inspect(itemset[1:4])
itemset <- apriori(data, parameter = list(supp = 0.04, conf = 0.8, minlen = 3, target='frequent itemsets'))
itemset
inspect(itemset[1:15])
itemset <- apriori(data, parameter = list(supp = 0.04, conf = 0.8, minlen = 4, target='frequent itemsets'))
itemset
itemset <- apriori(data, parameter = list(supp = 0.01, conf = 0.8, minlen = 4, target='frequent itemsets'))
itemset
inspect(itemset[1:20])
rules <- apriori(data, parameter = list(supp = 0.04, conf = 0.8, minlen = 2, target='rules'))
rules
inspect(rules[1:24])
rules <- apriori(data, parameter = list(supp = 0.03, conf = 0.8, minlen = 2, target='rules'))
rules
inspect(rules[1:40])
rules <- apriori(data, parameter = list(supp = 0.03, conf = 0.8, minlen = 3, target='rules'))
rules
inspect(rules[1:26])
rules.sorted_lift = sort(rules, by = 'lift')
rules.sorted_lift
inspect(rules.sorted_lift)
rules <- apriori(data, parameter = list(supp = 0.02, conf = 0.8, minlen = 3, target='rules'))
rules.sorted_lift = sort(rules, by = 'lift')
rules.sorted_lift
inspect(rules.sorted_lift)
rules <- apriori(data, parameter = list(supp = 0.01, conf = 0.8, minlen = 3, target='rules'))
rules.sorted_lift = sort(rules, by = 'lift')
rules.sorted_lift
inspect(rules.sorted_lift)
rules <- apriori(data, parameter = list(supp = 0.5, conf = 0.5, minlen = 2, target='rules'))
rules
rules <- apriori(data, parameter = list(supp = 0.1, conf = 0.5, minlen = 2, target='rules'))
rules
rules.sorted_lift = sort(rules, by = 'lift')
rules.sorted_lift
inspect(rules.sorted_lift)
rules <- apriori(data, parameter = list(supp = 0.05, conf = 0.5, minlen = 2, target='rules'))
rules.sorted_lift = sort(rules, by = 'lift')
rules.sorted_lift
inspect(rules.sorted_lift)
rules <- apriori(data, parameter = list(supp = 0.03, conf = 0.5, minlen = 2, target='rules'))
rules.sorted_lift = sort(rules, by = 'lift')
rules.sorted_lift
inspect(rules.sorted_lift)
rules <- apriori(data, parameter = list(supp = 0.02, conf = 0.5, minlen = 2, target='rules'))
rules.sorted_lift = sort(rules, by = 'lift')
rules.sorted_lift
inspect(rules.sorted_lift)
itemset <- apriori(data, parameter = list(supp = 0.02, conf = 0.5, minlen = 2, target='frequent itemsets'))
itemset
inspect(itemset)
itemset <- apriori(data, parameter = list(supp = 0.02, conf = 0.5, minlen = 3, target='frequent itemsets'))
itemset
inspect(itemset)
itemset <- apriori(data, parameter = list(supp = 0.02, conf = 0.5, minlen = 4, target='frequent itemsets'))
itemset
inspect(itemset)
library(arules)
library("arules", lib.loc="~/R/win-library/3.2")
workpath <- "E:/Project/Analysis/R_assocation_rules"
data = read.transactions('data/skill26.txt', format = 'basket', sep = ',', cols = NULL, encoding = 'utf-8')
itemset <- apriori(data, parameter = list(supp = 0.02, conf = 0.5, minlen = 4, target='frequent itemsets'))
itemset
inspect(itemset)
itemset <- apriori(data, parameter = list(supp = 0.02, conf = 0.5, minlen = 5, target='frequent itemsets'))
itemset
itemset <- apriori(data, parameter = list(supp = 0.01, conf = 0.5, minlen = 5, target='frequent itemsets'))
itemset
inspect(itemset)
rules <- apriori(data, parameter = list(supp = 0.01, conf = 0.5, minlen = 5, target='rules'))
rules.sorted_lift = sort(rules, by = 'lift')
inspect(rules.sorted_lift)
rules <- apriori(data, parameter = list(supp = 0.009, conf = 0.5, minlen = 5, target='rules'))
rules
inspect(rules[1:26])
rules.sorted_lift = sort(rules, by = 'lift')
inspect(rules.sorted_lift)
rules <- apriori(data, parameter = list(supp = 0.008, conf = 0.5, minlen = 5, target='rules'))
rules.sorted_lift = sort(rules, by = 'lift')
inspect(rules.sorted_lift)
rules <- apriori(data, parameter = list(supp = 0.007, conf = 0.5, minlen = 5, target='rules'))
rules.sorted_lift = sort(rules, by = 'lift')
inspect(rules.sorted_lift)
rules <- apriori(data, parameter = list(supp = 0.003, conf = 0.5, minlen = 5, target='rules'))
rules.sorted_lift
inspect(rules.sorted_lift)
rules <- apriori(data, parameter = list(supp = 0.003, conf = 0.5, minlen = 6, target='rules'))
rules.sorted_lift = sort(rules, by = 'lift')
rules.sorted_lift
inspect(rules.sorted_lift)
itemset <- apriori(data, parameter = list(supp = 0.003, conf = 0.5, minlen = 6, target='frequent itemsets'))
itemset
inspect(itemset)
rules <- apriori(data, parameter = list(supp = 0.003, conf = 0.5, minlen = 10, target='rules'))
rules
itemset <- apriori(data, parameter = list(supp = 0.003, conf = 0.5, minlen = 8, target='frequent itemsets'))
itemset
inspect(itemset)
itemset <- apriori(data, parameter = list(supp = 0.003, conf = 0.5, minlen = 7, target='frequent itemsets'))
itemset
itemset <- apriori(data, parameter = list(supp = 0.004, conf = 0.5, minlen = 7, target='frequent itemsets'))
itemset
inspect(itemset)
